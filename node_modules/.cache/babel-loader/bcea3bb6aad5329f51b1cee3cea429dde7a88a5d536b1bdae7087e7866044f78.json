{"ast":null,"code":"var _s = $RefreshSig$();\nimport { doc, onSnapshot, setDoc } from 'firebase/firestore';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { db } from '../firebase';\nimport Saved from '../img/saved.jpeg';\nconst Chats = () => {\n  _s();\n  const [chats, setChats] = useState([]);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    dispatch\n  } = useContext(ChatContext);\n  useEffect(() => {\n    const getChats = () => {\n      const unsub = onSnapshot(doc(db, 'userChats', currentUser.uid), doc => {\n        setChats(doc.data());\n      });\n      return () => {\n        unsub();\n      };\n    };\n    currentUser.uid && getChats();\n  }, [currentUser.uid]);\n  const handleSelect = u => {\n    dispatch({\n      type: 'CHANGE_USER',\n      payload: u\n    });\n  };\n  const handleCreateChat = async () => {\n    const chatId = `${currentUser.uid}-${currentUser.uid}`;\n    await setDoc(doc(db, 'chats', chatId), {\n      messages: [],\n      users: [currentUser.uid]\n    });\n    await setDoc(doc(db, 'userChats', currentUser.uid, 'chats', chatId), {\n      userInfo: {\n        displayName: currentUser.displayName,\n        photoURL: currentUser.photoURL,\n        uid: currentUser.uid\n      },\n      lastMessage: null\n    });\n    setChats(prevChats => {\n      const updatedChats = {\n        ...prevChats\n      };\n      updatedChats[chatId] = {\n        userInfo: {\n          displayName: currentUser.displayName,\n          photoURL: currentUser.photoURL,\n          uid: currentUser.uid\n        },\n        lastMessage: null\n      };\n      return updatedChats;\n    });\n  };\n};\n_s(Chats, \"PKlfs5vVrJUUTja9B24kklI/GGk=\");\n_c = Chats;\nvar _c;\n$RefreshReg$(_c, \"Chats\");","map":{"version":3,"names":["doc","onSnapshot","setDoc","React","useContext","useEffect","useState","AuthContext","ChatContext","db","Saved","Chats","_s","chats","setChats","currentUser","dispatch","getChats","unsub","uid","data","handleSelect","u","type","payload","handleCreateChat","chatId","messages","users","userInfo","displayName","photoURL","lastMessage","prevChats","updatedChats","_c","$RefreshReg$"],"sources":["/Users/admin/Downloads/2023 projects/chat-app/src/components/Chats.jsx"],"sourcesContent":["import { doc, onSnapshot, setDoc } from 'firebase/firestore';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { ChatContext } from '../context/ChatContext';\nimport { db } from '../firebase';\nimport Saved from '../img/saved.jpeg';\n\nconst Chats = () => {\n  const [chats, setChats] = useState([]);\n\n  const { currentUser } = useContext(AuthContext);\n  const { dispatch } = useContext(ChatContext);\n\n  useEffect(() => {\n    const getChats = () => {\n      const unsub = onSnapshot(doc(db, 'userChats', currentUser.uid), (doc) => {\n        setChats(doc.data());\n      });\n\n      return () => {\n        unsub();\n      };\n    };\n\n    currentUser.uid && getChats();\n  }, [currentUser.uid]);\n\n  const handleSelect = (u) => {\n    dispatch({ type: 'CHANGE_USER', payload: u });\n  };\n\n  const handleCreateChat = async () => {\n    const chatId = `${currentUser.uid}-${currentUser.uid}`;\n\n    await setDoc(doc(db, 'chats', chatId), {\n      messages: [],\n      users: [currentUser.uid],\n    });\n\n    await setDoc(doc(db, 'userChats', currentUser.uid, 'chats', chatId), {\n      userInfo: {\n        displayName: currentUser.displayName,\n        photoURL: currentUser.photoURL,\n        uid: currentUser.uid,\n      },\n      lastMessage: null,\n    });\n\n    setChats((prevChats) => {\n      const updatedChats = { ...prevChats };\n      updatedChats[chatId] = {\n        userInfo: {\n          displayName: currentUser.displayName,\n          photoURL: currentUser.photoURL,\n          uid: currentUser.uid,\n        },\n        lastMessage: null,\n      };\n      return updatedChats;\n    });\n  };\n};\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,UAAU,EAAEC,MAAM,QAAQ,oBAAoB;AAC5D,OAAOC,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,EAAE,QAAQ,aAAa;AAChC,OAAOC,KAAK,MAAM,mBAAmB;AAErC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAM;IAAES;EAAY,CAAC,GAAGX,UAAU,CAACG,WAAW,CAAC;EAC/C,MAAM;IAAES;EAAS,CAAC,GAAGZ,UAAU,CAACI,WAAW,CAAC;EAE5CH,SAAS,CAAC,MAAM;IACd,MAAMY,QAAQ,GAAGA,CAAA,KAAM;MACrB,MAAMC,KAAK,GAAGjB,UAAU,CAACD,GAAG,CAACS,EAAE,EAAE,WAAW,EAAEM,WAAW,CAACI,GAAG,CAAC,EAAGnB,GAAG,IAAK;QACvEc,QAAQ,CAACd,GAAG,CAACoB,IAAI,EAAE,CAAC;MACtB,CAAC,CAAC;MAEF,OAAO,MAAM;QACXF,KAAK,EAAE;MACT,CAAC;IACH,CAAC;IAEDH,WAAW,CAACI,GAAG,IAAIF,QAAQ,EAAE;EAC/B,CAAC,EAAE,CAACF,WAAW,CAACI,GAAG,CAAC,CAAC;EAErB,MAAME,YAAY,GAAIC,CAAC,IAAK;IAC1BN,QAAQ,CAAC;MAAEO,IAAI,EAAE,aAAa;MAAEC,OAAO,EAAEF;IAAE,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAMC,MAAM,GAAI,GAAEX,WAAW,CAACI,GAAI,IAAGJ,WAAW,CAACI,GAAI,EAAC;IAEtD,MAAMjB,MAAM,CAACF,GAAG,CAACS,EAAE,EAAE,OAAO,EAAEiB,MAAM,CAAC,EAAE;MACrCC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,CAACb,WAAW,CAACI,GAAG;IACzB,CAAC,CAAC;IAEF,MAAMjB,MAAM,CAACF,GAAG,CAACS,EAAE,EAAE,WAAW,EAAEM,WAAW,CAACI,GAAG,EAAE,OAAO,EAAEO,MAAM,CAAC,EAAE;MACnEG,QAAQ,EAAE;QACRC,WAAW,EAAEf,WAAW,CAACe,WAAW;QACpCC,QAAQ,EAAEhB,WAAW,CAACgB,QAAQ;QAC9BZ,GAAG,EAAEJ,WAAW,CAACI;MACnB,CAAC;MACDa,WAAW,EAAE;IACf,CAAC,CAAC;IAEFlB,QAAQ,CAAEmB,SAAS,IAAK;MACtB,MAAMC,YAAY,GAAG;QAAE,GAAGD;MAAU,CAAC;MACrCC,YAAY,CAACR,MAAM,CAAC,GAAG;QACrBG,QAAQ,EAAE;UACRC,WAAW,EAAEf,WAAW,CAACe,WAAW;UACpCC,QAAQ,EAAEhB,WAAW,CAACgB,QAAQ;UAC9BZ,GAAG,EAAEJ,WAAW,CAACI;QACnB,CAAC;QACDa,WAAW,EAAE;MACf,CAAC;MACD,OAAOE,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAACtB,EAAA,CAtDID,KAAK;AAAAwB,EAAA,GAALxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}