{"ast":null,"code":"var _s = $RefreshSig$();\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { useEffect, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { db } from '../firebase';\nconst StatusUpdater = () => {\n  _s();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const updateStatus = async (status, statusImage) => {\n      if (currentUser) {\n        await updateDoc(doc(db, 'users', currentUser.uid), {\n          status: status,\n          statusImage: statusImage\n        });\n      }\n    };\n\n    // Set status to \"online\" and set online status image when user logs in\n    updateStatus('online', 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Green_sphere.svg/1024px-Green_sphere.svg.png');\n\n    // Set status to \"offline\" and set offline status image when user logs out\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (!user) {\n        updateStatus('offline', 'https://m.media-amazon.com/images/I/719zM3RmAxL.png');\n      }\n    });\n    return () => {\n      unsubscribe();\n      if (currentUser) {\n        updateStatus('offline', 'https://m.media-amazon.com/images/I/719zM3RmAxL.png');\n      }\n    };\n  }, [currentUser]);\n  return null; // This component doesn't render anything\n};\n_s(StatusUpdater, \"pPz2vEQ49HvItek0rBs6jbAJRpk=\");\n_c = StatusUpdater;\nexport default StatusUpdater;\nvar _c;\n$RefreshReg$(_c, \"StatusUpdater\");","map":{"version":3,"names":["doc","updateDoc","useEffect","useContext","AuthContext","db","StatusUpdater","_s","currentUser","updateStatus","status","statusImage","uid","unsubscribe","auth","onAuthStateChanged","user","_c","$RefreshReg$"],"sources":["/Users/admin/Downloads/2023 projects/chat-app/src/components/StatusUpdater.jsx"],"sourcesContent":["import { doc, updateDoc } from 'firebase/firestore';\nimport { useEffect, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport { db } from '../firebase';\n\nconst StatusUpdater = () => {\n  const { currentUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    const updateStatus = async (status, statusImage) => {\n      if (currentUser) {\n        await updateDoc(doc(db, 'users', currentUser.uid), {\n          status: status,\n          statusImage: statusImage,\n        });\n      }\n    };\n\n    // Set status to \"online\" and set online status image when user logs in\n    updateStatus(\n      'online',\n      'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Green_sphere.svg/1024px-Green_sphere.svg.png',\n    );\n\n    // Set status to \"offline\" and set offline status image when user logs out\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (!user) {\n        updateStatus('offline', 'https://m.media-amazon.com/images/I/719zM3RmAxL.png');\n      }\n    });\n\n    return () => {\n      unsubscribe();\n      if (currentUser) {\n        updateStatus('offline', 'https://m.media-amazon.com/images/I/719zM3RmAxL.png');\n      }\n    };\n  }, [currentUser]);\n\n  return null; // This component doesn't render anything\n};\n\nexport default StatusUpdater;\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AACnD,SAASC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,EAAE,QAAQ,aAAa;AAEhC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAY,CAAC,GAAGL,UAAU,CAACC,WAAW,CAAC;EAE/CF,SAAS,CAAC,MAAM;IACd,MAAMO,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;MAClD,IAAIH,WAAW,EAAE;QACf,MAAMP,SAAS,CAACD,GAAG,CAACK,EAAE,EAAE,OAAO,EAAEG,WAAW,CAACI,GAAG,CAAC,EAAE;UACjDF,MAAM,EAAEA,MAAM;UACdC,WAAW,EAAEA;QACf,CAAC,CAAC;MACJ;IACF,CAAC;;IAED;IACAF,YAAY,CACV,QAAQ,EACR,wGAAwG,CACzG;;IAED;IACA,MAAMI,WAAW,GAAGC,IAAI,CAACC,kBAAkB,CAAEC,IAAI,IAAK;MACpD,IAAI,CAACA,IAAI,EAAE;QACTP,YAAY,CAAC,SAAS,EAAE,qDAAqD,CAAC;MAChF;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXI,WAAW,EAAE;MACb,IAAIL,WAAW,EAAE;QACfC,YAAY,CAAC,SAAS,EAAE,qDAAqD,CAAC;MAChF;IACF,CAAC;EACH,CAAC,EAAE,CAACD,WAAW,CAAC,CAAC;EAEjB,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CAnCID,aAAa;AAAAW,EAAA,GAAbX,aAAa;AAqCnB,eAAeA,aAAa;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}